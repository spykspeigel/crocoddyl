# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: ROS-CI

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          # Ubuntu 18.04, g++, Release
          - {name: "Bionic / g++ / Release", ROS_DISTRO: melodic}
          # Ubuntu 20.04, g++, Release
          - {name: "Focal / g++ / Release", ROS_DISTRO: noetic}
          # Ubuntu 20.04, clang, Release
          - {name: "Focal / clang / Release", ROS_DISTRO: noetic, ADDITIONAL_DEBS: clang, CC: clang, CXX: clang++}
          # Ubuntu 20.04, clang, Release, multi-threading
          - {name: "Focal / clang / Release / Multi-threading", ROS_DISTRO: noetic, ADDITIONAL_DEBS: clang, CC: clang, CXX: clang++, CMAKE_ARGS: "-DBUILD_WITH_MULTITHREADS=ON -DBUILD_WITH_NTHREADS=2"}
          # Format check
          - {name: "Format check", ROS_DISTRO: noetic, CLANG_FORMAT_CHECK: file, CLANG_FORMAT_VERSION: "6.0", BEFORE_RUN_CLANG_FORMAT_CHECK: "wget https://raw.githubusercontent.com/Gepetto/linters/master/.clang-format-6.0 -O /tmp/clang_format_check/crocoddyl/.clang-format", ADDITIONAL_DEBS: wget}
          ## Working configs for Debug mode. However, tests take too long in Debug mode (~1h on a laptop).
          ## Hence, not active on GitHub Actions
          # # Ubuntu 20.04, g++, Debug
          # - {name: "Focal / g++ / Debug", ROS_DISTRO: noetic, CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=Debug'}
          # Ubuntu 20.04, clang, Debug
          - {name: "Focal / clang / Debug", ROS_DISTRO: noetic, ADDITIONAL_DEBS: clang, CC: clang, CXX: clang++, CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=Debug'}
    name: ${{ matrix.env.name }}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      UPSTREAM_WORKSPACE: dependencies.rosinstall  # to build example-robot-data from source as it's not released via the ROS buildfarm
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'source /root/target_ws/install/setup.bash && cd /root/target_ws/build/crocoddyl && make test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci - use fork until awaits https://github.com/ros-industrial/industrial_ci/issues/767 is resolved
      - uses: 'wxmerkt/industrial_ci@topic/clang-format-check-in-deterministic-location'
        env: ${{ matrix.env }}
      # # Run industrial_ci
      # - uses: 'ros-industrial/industrial_ci@master'
      #   env: ${{ matrix.env }}
